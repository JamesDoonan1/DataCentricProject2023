<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Managers Page</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #ecf0f1; /* Light gray background color */
      margin: 0;
      padding: 0;
      text-align: center;
      color: #2c3e50; /* Dark gray text color */
    }

    header {
      background-color: #2ecc71; /* Green header color */
      padding: 20px;
    }

    h1 {
      margin: 0;
      color: #fff; /* White text color */
    }

    .add-manager-form {
      display: none;
    }

    .error-message {
      color: red;
    }

    table {
      margin: 20px auto;
      width: 80%;
      border-collapse: collapse;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    th,
    td {
      border: 1px solid #bdc3c7; /* Light border color */
      padding: 8px;
    }

    th {
      background-color: #2ecc71; /* Green header color */
      color: #fff; /* White text color */
    }

    tbody tr:hover {
      background-color: #ecf0f1; /* Light gray background on hover */
    }

    button {
      background-color: #2ecc71; /* Green button color */
      color: #fff; /* White text color */
      padding: 8px 16px;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #27ae60; /* Darker green on hover */
    }

    a {
      color: #3498db; /* Blue link color */
      text-decoration: none;
      font-weight: bold;
      transition: color 0.3s;
    }

    a:hover {
      color: #2980b9; /* Lighter blue on hover */
    }
  </style>
</head>

<body>
  <header>
    <h1>Managers</h1>
  </header>

  <!-- Display error messages -->
  <div id="error-messages" class="error-message"></div>

  <!-- Toggleable form for adding a manager -->
  <button onclick="toggleForm(event)">Add Manager</button>
  <div class="add-manager-form">
    <!-- Form for adding a manager -->
    <h4> Manager ID must be 4 characters in length.</h4>
    <h4> Name must be > 5 characters</h4>
    <h4> Salary must be between 30,000 and 70,000.</h4>
    <form id="addManagerForm" action="/managers" method="post" onsubmit="return validateForm(event)">
      <!-- Include form fields -->
      <label for="id">Manager ID:</label>
      <input type="text" id="_id" name="_id" required>
      <br>
      <label for="name">Name:</label>
      <input type="text" id="name" name="name" required>
      <br>
      <label for="salary">Salary:</label>
      <input type="number" id="salary" name="salary" required>
      <br>
      <button type="submit" onclick="return validateForm(event)">Submit</button>
    </form>
  </div>

  <!-- Link back to Main Page -->
  <a href="/">Back to Main Page</a>

  <!-- Display managers in a table -->
  <table>
    <thead>
      <tr>
        <th>Manager ID</th>
        <th>Name</th>
        <th>Salary</th>
      </tr>
    </thead>
    <tbody>
      <% managers.forEach(manager=> { %>
        <tr>
          <td>
            <%= manager._id %>
          </td>
          <td>
            <%= manager.name %>
          </td>
          <td>
            <%= manager.salary %>
          </td>
        </tr>
        <% }) %>
    </tbody>
  </table>


  <script>
    async function toggleForm() {
      const form = document.querySelector('.add-manager-form');
      form.style.display = form.style.display === 'none' || form.style.display === '' ? 'block' : 'none';
      // Clear previous error messages on toggle
      document.getElementById('error-messages').innerHTML = '';
    }
  
    async function validateForm() {
      const idInput = document.getElementById('_id');
      const nameInput = document.getElementById('name');
      const salaryInput = document.getElementById('salary');
      const errorMessages = document.getElementById('error-messages');
  
      // Validate Manager ID
      if (idInput.value.length !== 4) {
        errorMessages.innerHTML = 'Manager ID must be 4 characters in length.';
        event.preventDefault();
        return false;

      }
  
      // Validate Name
      if (nameInput.value.length <= 5) {
        errorMessages.innerHTML = 'Name must be more than 5 characters.';
        event.preventDefault();
        return false;

      }
  
      // Validate Salary
      const salaryValue = parseFloat(salaryInput.value);
      if (isNaN(salaryValue) || salaryValue < 30000 || salaryValue > 70000) {
        errorMessages.innerHTML = 'Salary must be between 30,000 and 70,000.';
        event.preventDefault();
        return false;

      }
  
      // Check if Manager ID is unique
      const isUniqueId = await isManagerIdUnique(idInput.value);
      if (!isUniqueId) {
        errorMessages.innerHTML = 'Manager ID is already in use. Choose a different one.';
        event.preventDefault();
        return false;

      }
  
      // Clear previous error messages
      errorMessages.innerHTML = '';
  
      // If all validations pass, the form will submit
      return true;
    }
  
    async function isManagerIdUnique(managerId) {
      // Make an asynchronous request to check the uniqueness of managerId
      const response = await fetch(`/check-unique-manager-id?managerId=${managerId}`);
      const result = await response.json();
      event.preventDefault();
      return result.isUnique;

    }
  </script>
</body>

</html>
